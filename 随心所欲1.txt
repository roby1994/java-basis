关键字：
1. 事务:执行单个逻辑功能的一组指令或操作。（理解：这些操作要么都执行，要么都不执行。不可再分割的工作单位）

2. ACID
	2.1 原子性 不可再分割的工作单元，要么都执行，要么都不执行。
	2.2 一致性 事务开始之前和事务开始之后，数据库的完整性约束没有被破坏。（理解：数据库事务不能破坏关系数据的完整性或者业务逻辑上的一致性）
	2.3 隔离性 多个事务并发访问时，事务之间是隔离的，不同的事务操作相同的数据，每个事务都有各自的完整数据空间。事务不会查看到中间状态的数据。（我的理解：就是事务与事务之间不能相互干扰操作，而破坏了事务本身运行的效果。）
	2.4 持久性 事务完成后，该事务2对数据库所做的更改便持久保存在数据库之中，并不会被回滚。成为系统永久的部分。（我的理解：事务执行完后的数据状态被持久化到磁盘上，支持下次查询。）

3. 幂等性 一次和多次请求某个资源，应该具有同样的副作用。（它是分布式系统设计中十分重要的概念。）

4. 分布式事务 

5. 幂等性设计 能达到与分布式事务一样的效果，比较轻量级，适应异构环境。保证事务的ACID特性。
	如何设计幂等性？我在文档中看到一个例子：就是分两步走：
	1）使用一个函数(create_ticket())创建一个ticket_id;
	2）调用idempotent_withdraw(ticket_id, account_id, amount)。
	
	这个不是幂等性的，但这种设计环境下，它对系统的影响可以忽略不计。因为idempotent_withdrawv这个是幂等性的，所以任何由于网络等原因失败或超时，客户端都可以retry,直到获得反馈结果。

6. HTTP的幂等性（其实幂等性是数学中的概念，表达的是N次变换与1次变换的结果相同。）
	两种方式： RESTful、SOA
	1）HTTP GET: 资源获取，不应有副作用，所以幂等的。
	2）HTTP DELETE: 资源删除，具有副作用，当它应该满足幂等性，不管删除一次还是多次，对系统产生的副作用是相同的。
	3）HTTP POST: POST对应的URI并非创建的资源本身，而是资源的接收者。因为响应时要把资源创建成功与否的状态与资源的地址返回给请求者。
				  多次请求，会创建多份资源。这些资源具有不同的URI。所以不具备幂等性。
	4）HTTP PUT: PUT对应的URI就是要创建或更新的资源本身。对同一URI进行多次PUT的副作用和一次PUT是相同的。所以是幂等的。	

7. 如何理解REST的无状态设计？
	（1）把状态嵌入到有应答消息里，
	（2）做法：通过超链接，实现有状态交互。请求消息每次交互都包含完整的信息。有多种技术实现了不同请求间状态信息的传输，例如 URI ，cookies 和隐藏表单字段等。
